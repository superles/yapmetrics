package exitcheck

import (
	"go/ast"
	"strings"

	"golang.org/x/tools/go/analysis"
)

var (
	skipTests bool
)

// ExitCheckAnalyzer - анализатор для проверки использования os.Exit в функции main
var ExitCheckAnalyzer = &analysis.Analyzer{
	Name: "exitcheck",
	Doc:  "Запрещает использовать прямой вызов os.Exit в функции main",
	Run:  new(runner).run,
}

func init() {
	ExitCheckAnalyzer.Flags.BoolVar(&skipTests, "skiptests", false, "skip analysis on test files")
}

// runner - структура для реализации интерфейса runnerInterface
type runner struct {
	pass *analysis.Pass
}

// run - функция выполнения анализа
func (r runner) run(pass *analysis.Pass) (interface{}, error) {
	r.pass = pass
	for _, file := range pass.Files {
		if r.shouldSkipFile(file) {
			continue
		}
		ast.Inspect(file, func(n ast.Node) bool {
			// Проверка наличия функции main
			fn, isMain := n.(*ast.FuncDecl)
			if !isMain || fn.Name.Name != "main" {
				return true
			}

			// Проверка наличия вызовов os.Exit внутри функции main
			ast.Inspect(fn.Body, func(n ast.Node) bool {
				r.checkOsExitExists(n)
				return true
			})

			return false
		})
	}

	return nil, nil
}

// checkOsExitExists - функция проверки наличия вызовов os.Exit
func (r runner) checkOsExitExists(n ast.Node) {
	if callExpr, ok := n.(*ast.CallExpr); ok {
		if selExpr, ok := callExpr.Fun.(*ast.SelectorExpr); ok {
			if ident, ok := selExpr.X.(*ast.Ident); ok && ident.Name == "os" && selExpr.Sel.Name == "Exit" {
				r.pass.Reportf(callExpr.Pos(), "избегайте прямых вызовов os.Exit в функции main")
			}
		}
	}
}

// shouldSkipFile - функция проверки пропуска файлов по названию и наличию комментария
func (r runner) shouldSkipFile(file *ast.File) bool {
	fileName := r.pass.Fset.File(file.Pos()).Name()
	if skipTests && strings.Contains(fileName, "_test.go") {
		return true
	}
	// Пример: пропустить файл, если он содержит комментарий "// Code generated by 'go test'. DO NOT EDIT."
	for _, comment := range file.Comments {
		for _, line := range comment.List {
			if strings.Contains(line.Text, "// Code generated by 'go test'. DO NOT EDIT.") {
				return true
			}
		}
	}

	return false
}
